# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
    update_fastlane
  end

  desc "Setup development environment"
  lane :setup_dev do |options|
    begin
      sh("brew install swiftlint")
    rescue => exception
      UI.error("❌ Please install homebrew and then re-run this lane: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"")
      raise exception
    end

    pre_commit_link = "../.git/hooks/pre-commit"
    if File.exist?(pre_commit_link) || File.symlink?(pre_commit_link)
      UI.message("pre-commit script already linked ✅")
    else
      UI.message("Linking pre-commit script 🔗")
      Dir.chdir ".." do
        sh("ln -s -f ../../scripts/pre-commit.sh .git/hooks/pre-commit")
      end
    end
  end

  desc "Runs all the iOS tests"
  lane :test_ios do |options|
    generate_snapshots = ENV["CIRCLECI_TESTS_GENERATE_SNAPSHOTS"] == "true"

    scan(
      step_name: "scan - iPhone", 
      device: ENV['SCAN_DEVICE'] || "iPhone 12 (15.2)",
      scheme: "RevenueCat",
      testplan: "AllTests",
      prelaunch_simulator: true,
      output_types: 'junit',
      number_of_retries: generate_snapshots ? 0 : 5,
      output_directory: "fastlane/test_output/xctest/ios",
      fail_build: !generate_snapshots
    )
  end

  desc "Runs all the tvOS tests"
  lane :test_tvos do |options|
    scan(
      step_name: "scan - Apple TV",
      device: ENV['SCAN_DEVICE'] || "Apple TV (15.2)",
      scheme: "RevenueCat",
      testplan: "RevenueCat",
      prelaunch_simulator: true,
      output_types: 'junit',
      number_of_retries: 5,
      output_directory: "fastlane/test_output/xctest/tvos"
    )
  end

  desc "Replace version number in project and supporting files"
  lane :replace_version_number do |options|
    new_version_number = options[:version]
    UI.user_error!("missing version") unless new_version_number
    previous_version_number = current_version_number
    
    version_number_without_prerelease_modifiers = new_version_number.split("-")[0]
    increment_version_number(version_number: version_number_without_prerelease_modifiers)
    
    files_to_update = [
      '../RevenueCat.podspec',
      '../Sources/Purchasing/Purchases.swift',
      '../Sources/Misc/SystemInfo.swift',
      '../.jazzy.yaml',
      '../.version',
      '../Examples/MagicWeather/MagicWeather.xcodeproj/project.pbxproj',
      '../Examples/MagicWeatherSwiftUI/Magic Weather SwiftUI.xcodeproj/project.pbxproj',
      '../scripts/docs/index.html',
    ]
    for file_to_update in files_to_update
      increment_build_number(previous_version_number, new_version_number, file_to_update)
    end
  end

  desc "Increment build number and update changelog"
  lane :bump_and_update_changelog do |options|
    replace_version_number(options)
    attach_changelog_to_master(options[:version])
  end

  desc "Make github release"
  lane :github_release do |options|
    release_version = options[:version]
    UI.user_error!("missing version") unless release_version

    begin
      changelog = File.read("../CHANGELOG.latest.md")
    rescue
      UI.user_error!("Please add a CHANGELOG.latest.md file before calling this lane")
    end
    commit_hash = last_git_commit[:commit_hash]
    puts commit_hash

    is_prerelease = release_version.include?("-")

    set_github_release(
      repository_name: "revenuecat/purchases-ios",
      api_token: ENV["GITHUB_TOKEN"],
      name: release_version,
      tag_name: "#{release_version}",
      description: changelog,
      commitish: commit_hash,
      upload_assets: ["RevenueCat.framework.zip", "RevenueCat.xcframework.zip"],
      is_draft: false,
      is_prerelease: is_prerelease
  )
  end

  desc "Release checks"
  lane :release_checks do |options|
    version_number = current_version_number
    check_no_git_tag_exists(version_number)
    check_pods
    carthage_archive
    export_xcframework
    check_no_github_release_exists(version_number)
  end

  desc "build tvOS, watchOS, macOS"
  lane :build_tv_watch_mac do |options|
    check_pods
    carthage(command: "build", no_skip_current: true, platform: "watchOS,tvOS,Mac", use_xcframeworks: true)
  end

  desc "macOS build"
  lane :build_mac do |options|
    check_pods
    carthage(command: "build", no_skip_current: true, platform: "Mac", use_xcframeworks: true)
  end

  desc "Run the carthage archive steps to prepare for carthage distribution"
  lane :carthage_archive do |options|
    carthage_archive
  end

  desc "archive"
  lane :archive do
    match(type: "appstore")
    gym(export_method: "app-store")
  end

  desc "archive all platforms"
  lane :archive_all_platforms do
    platforms = {
      'ios' => 'generic/platform=ios',
       'tvos' => 'generic/platform=tvos', 
       'catalyst' => 'generic/platform=macOS,variant=Mac Catalyst'
    }
    
    platforms.each do |platform, destination|
      match(type: "appstore", platform: platform)
      gym(export_method: "app-store", destination: destination)
    end
  end

  desc "build Swift API tester"
  lane :build_swift_api_tester do
    xcodebuild(
      workspace: 'Tests/APITesters/APITesters.xcworkspace',
      scheme: 'SwiftAPITester',
      destination: 'generic/platform=iOS Simulator'
    )
  end
  
  desc "build ObjC API tester"
  lane :build_objc_api_tester do
    xcodebuild(
      workspace: 'Tests/APITesters/APITesters.xcworkspace',
      scheme: 'ObjCAPITester',
      destination: 'generic/platform=iOS Simulator'
    )
  end

  desc "replace API KEY for installation and integration tests"
  lane :replace_api_key_integration_tests do
    replace_in("REVENUECAT_API_KEY", ENV["REVENUECAT_API_KEY"], '../Tests/BackendIntegrationTests/Constants.swift')
    replace_in("REVENUECAT_API_KEY", ENV["REVENUECAT_API_KEY"], '../Tests/InstallationTests/CommonFiles/RCInstallationRunner.m')

    replace_in("REVENUECAT_PROXY_URL", ENV["REVENUECAT_PROXY_URL"].to_s, '../Tests/BackendIntegrationTests/Constants.swift', allow_empty: true)
    replace_in("REVENUECAT_PROXY_URL", ENV["REVENUECAT_PROXY_URL"].to_s, '../Tests/InstallationTests/CommonFiles/RCInstallationRunner.m', allow_empty: true)
  end

  desc "Release to CocoaPods, create Carthage archive, export XCFramework, and create GitHub release"
  lane :release do |options|
    version_number = current_version_number
    push_pods
    carthage_archive
    export_xcframework
    github_release(version: version_number)
  end

  desc "Bump version, edit changelog, and create pull request"
  lane :bump do |options|
    ensure_git_branch(branch: options[:branch] || 'main')
    ensure_git_status_clean

    # Ensure GitHub API token is set
    if ENV['GITHUB_PULL_REQUEST_API_TOKEN'].nil?
      UI.error("Environment variable GITHUB_PULL_REQUEST_API_TOKEN is required to create a pull request")
      UI.error("Please make a fastlane/.env file from the fastlane/.env.SAMPLE template")
      UI.user_error!("Could not find value for GITHUB_PULL_REQUEST_API_TOKEN")
    end

    compile_autogenerated_header

    # Get and print current version number
    version_number = current_version_number
    UI.important("Current version is #{version_number}")

    # Ask for new version number
    new_version_number = UI.input("New version number: ")

    generated_contents = github_changelog
    changelog_path = edit_changelog(generated_contents: generated_contents)
    changelog = File.read(changelog_path)
    
    create_new_release_branch(version: new_version_number)
    replace_version_number(version: new_version_number)

    attach_changelog_to_master(new_version_number)

    commit_updated_files_and_push(version: new_version_number)    
    
    create_pull_request(
      title: "Release/#{new_version_number}",
      base: "main",
      body: changelog
    )
  end

  # Inspired by fastlane's changelog
  # https://github.com/fastlane/fastlane/blob/eb4584e0394c1fecccd70d4313260f4707f2af80/fastlane/Fastfile#L346-L380
  desc "Generate changelog from GitHub compare and PR data for mentioning GitHub usernames in release notes"
  lane :github_changelog do |options|
    last_version = sh("git describe --tags --abbrev=0").strip
    old_version = options[:old_version] || last_version

    UI.important("Auto-generating changelog since #{old_version}")

    org = "RevenueCat"
    repo = "purchases-ios"

    path = "/repos/#{org}/#{repo}/compare/#{old_version}...HEAD"
    api_token = ENV["GITHUB_TOKEN"]

    # Get all commits from previous version (tag) to HEAD
    resp = github_api(path: path, api_token: api_token)
    body = JSON.parse(resp[:body])
    commits = body["commits"].reverse

    formatted = commits.map do |commit|
      # Default to commit message info
      message = commit["commit"]["message"].lines.first.strip
      name = commit["commit"]["author"]["name"]
      username = commit["author"]["login"]

      # Get pull request associate with commit message
      sha = commit["sha"]
      pr_resp = github_api(path: "/search/issues?q=repo:#{org}/#{repo}+is:pr+base:main+SHA:#{sha}", api_token: api_token)
      body = JSON.parse(pr_resp[:body])
      items = body["items"]

      if items.size == 1
        item = items.first
        message = "#{item['title']} (##{item['number']})"
        username = item["user"]["login"]
      else
        UI.user_error!("Cannot generate changelog. Multiple commits found for #{sha}")
      end

      "* #{message} via #{name} (@#{username})"
    end.join("\n")

    puts formatted if options[:print]

    formatted
  end

  desc "Trigger CircleCI job to generate snapshots"
  lane :generate_snapshots do 
    require 'rest-client'

    # Prompt branch
    default_branch = git_branch
    branch = UI.input("Branch (defaults to #{default_branch}): ")
    branch = default_branch if branch == ""

    # Get CircleCI token
    circle_token = ENV["CIRCLE_TOKEN"]
    UI.user_error! "Please set the CIRCLE_TOKEN environment variable" unless circle_token

    # Make request
    headers = {"Circle-Token": circle_token, "Content-Type": "application/json", "Accept": "application/json"}
    data = {parameters: {generate_snapshots: true}, branch: branch}
    url = "https://circleci.com/api/v2/project/github/RevenueCat/purchases-ios/pipeline"

    resp = RestClient.post url, data.to_json, headers

    # Print workflow url
    number = JSON.parse(resp.body)["number"]
    workflow_url = "https://app.circleci.com/pipelines/github/RevenueCat/purchases-ios/#{number}"

    UI.important "Workflow: #{workflow_url}"
  end

  desc "Creates a new PR after new snapshot files were generated"
  lane :create_snapshot_pr do |options|
    version = options[:version]
    base_branch = ENV["CIRCLE_BRANCH"]

    build_number = ENV["CIRCLE_BUILD_NUM"] 

    branch_name = "generated_snapshots/#{base_branch}-#{build_number}-#{version}"
    sh("git", "checkout", "-b", branch_name)

    sh("git", "add", "../Tests")
    file_count = sh("git diff --cached --numstat | wc -l").strip.to_i

    if file_count == 0
      UI.important("No files to be committed")
    else
      sh("git", "commit", "-m", "Generating new test snapshots")
      push_to_git_remote

      circle_user = ENV["CIRCLE_USERNAME"]
      body = "Requested by @#{circle_user}"

      create_pull_request(
        repo: "revenuecat/purchases-ios",
        title: "Generating new test snapshots - #{version}",
        body: body,
        base: base_branch,
        api_token: ENV["GITHUB_TOKEN"],
        head: branch_name
      )
    end
  end

  desc "Creates RevenueCat-Swift.h for a new release"
  private_lane :compile_autogenerated_header do |options|
    # See https://github.com/RevenueCat/purchases-ios/blob/main/Documentation.docc/V4_API_Migration_guide.md#objc--spm

    require 'fileutils'

    arch = "x86_64"

    Dir.mktmpdir {|dir|
      xcodebuild(
        project: 'RevenueCat.xcodeproj',
        scheme: 'RevenueCat',
        derivedDataPath: dir,
        configuration: 'release',
        arch: arch,
        build_settings: {
          'ONLY_ACTIVE_ARCH': 'YES'
        }
      )
      
      FileUtils.cp(
        "#{dir}/Build/Intermediates.noindex/RevenueCat.build/Release/RevenueCat.build/Objects-normal/#{arch}/RevenueCat-Swift.h",
        File.absolute_path("../Tests/InstallationTests/CommonFiles/RevenueCat-Swift.h")
      )
    }
  end

  private_lane :edit_changelog do |options|
    generated_contents = options[:generated_contents].to_s

    if generated_contents.size > 0
      UI.message("Using auto generated contents:\n#{generated_contents}")
      File.write(changelog_path, generated_contents)
    else
      UI.user_error!("Generated content for changlog was empty")
    end

    # Open CHANGELOG.latest.md in editor
    changelog_filename = "CHANGELOG.latest.md"
    changelog_path = File.absolute_path("../#{changelog_filename}")
    editor = ENV['FASTLANE_EDITOR'] || ENV['EDITOR'] || 'vim'

    content_before_opening_editor = File.read(changelog_path)

    UI.message("Will use '#{editor}'... Override by setting FASTLANE_EDITOR or EDITOR environment variable")
    if UI.confirm("Open #{changelog_filename} in '#{editor}'? (No will quit this process)")
      system(editor, changelog_path.shellescape)
    else
      UI.user_error!("Cancelled")
    end

    # Some people may use visual editors and `system` will continue right away.
    # This will compare the content before and afer attempting to open
    # and will open a blocking prompt for the visual editor changes to be saved
    content_after_opening_editor = File.read(changelog_path)
    if content_before_opening_editor == content_after_opening_editor
      unless UI.confirm("You may have opened the changelog in a visual editor. Enter 'y' when changes are saved or 'n' to cancel")
        UI.user_error!("Cancelled")
      end
    end

    changelog_path
  end

  private_lane :create_new_release_branch do |options|
    version = options[:version]
    sh("git checkout -b 'release/#{version}'")
  end

  private_lane :commit_updated_files_and_push do |options|
    version = options[:version]
    sh("git add -u")
    sh("git commit -m 'Version bump for #{version}'")
    push_to_git_remote
  end

  desc "Prepare next version"
  lane :prepare_next_version do |options|
    old_version_number = current_version_number
    major, minor, _ = old_version_number.split('.')
    next_version = "#{major}.#{minor.to_i + 1}.0"
    next_version_snapshot = "#{next_version}-SNAPSHOT"

    branch_name = "bump/#{next_version_snapshot}"
    sh("git", "checkout", "-b", branch_name)

    replace_version_number(version: next_version_snapshot)

    sh("git", "commit", "-am", "Preparing for next version")
    push_to_git_remote

    create_pull_request(
      repo: "revenuecat/purchases-ios",
      title: "Prepare next version: #{next_version_snapshot}",
      base: "main",
      api_token: ENV["GITHUB_TOKEN"],
      head: branch_name
    )
  end

  desc "Export XCFramework"
  lane :export_xcframework do |options|
    output_directory = 'build/xcframeworks'
    platforms = [
        'iOS',
        'macOS',
        'maccatalyst',
        'tvOS',
        'watchOS'
      ]

    create_xcframework(
      destinations: platforms,
      scheme: 'RevenueCat',
      xcframework_output_directory: output_directory,
      # bitcode produces issues with Catalyst when validating builds, 
      # with a message: "object not signed at all".
      enable_bitcode: false,
      include_debug_symbols: true
    )
    # sh runs from the Fastfile's location, but other commands run from the project root.
    output_directory_for_sh = "../#{output_directory}"

    xcframeworks_zip_path_for_sh = "../RevenueCat.xcframework.zip"
    sh("ditto", "-c", "-k", "--sequesterRsrc", "--keepParent", 
      output_directory_for_sh, 
      xcframeworks_zip_path_for_sh)

  end

  desc "Run BackendIntegrationTests"
  lane :backend_integration_tests do |options|
    replace_api_key_integration_tests
    scan(
      scheme: "BackendIntegrationTests", 
      derived_data_path: "scan_derived_data",
      output_types: 'junit',
      number_of_retries: 3,
      output_directory: "fastlane/test_output/xctest/ios"
    )
  end

  desc "Update swift package commit"
  lane :update_swift_package_commit do
    project_file_locations = [
      '../Tests/InstallationTests/SPMInstallation/SPMInstallation.xcodeproj/project.pbxproj',
      '../Examples/MagicWeather/MagicWeather.xcodeproj/project.pbxproj'
    ]

    old_kind_line = "kind = branch;"
    new_kind_line = "kind = revision;"

    commit_hash = last_git_commit[:commit_hash]
    old_branch_line = "branch = main;"
    new_revision_line = "revision = #{commit_hash};"

    project_file_locations.each { |project_file_location|
      replace_in(old_kind_line, new_kind_line, project_file_location)
      replace_in(old_branch_line, new_revision_line, project_file_location)
    }
  end

  desc "Preview docs"
  lane :preview_docs do
    ENV["INCLUDE_DOCC_PLUGIN"] = "true"
    Dir.chdir("..") do
      sh("swift",
         "package",
         "--disable-sandbox",
         "preview-documentation",
         "--target",
         "RevenueCat",
         "--transform-for-static-hosting")
    end
  end

  desc "Generate docs"
  lane :generate_docs do
    ENV["INCLUDE_DOCC_PLUGIN"] = "true"
    version_number = current_version_number
    docs_repo_base_url = ENV["DOCS_REPO_BASE_URL"]
    docs_repo_name = ENV["DOCS_REPO_NAME"]
    UI.user_error!("Missing environment variable: DOCS_REPO_BASE_URL") unless docs_repo_base_url
    UI.user_error!("Missing environment variable: DOCS_REPO_NAME") unless docs_repo_name
    
    docs_repo_url = File.join(docs_repo_base_url, docs_repo_name)
    hosting_base_path = File.join(docs_repo_name, version_number)
    
    Dir.mktmpdir do |docs_generation_folder|
      # swift package must be run from the dir that contains the Package.swift
      # output is generated in docs_generation_folder
      Dir.chdir("..") do
        sh("swift",
           "package",
           "--disable-sandbox",
           "--allow-writing-to-directory",
           docs_generation_folder,
           "generate-documentation",
           "--target",
           "RevenueCat",
           "--disable-indexing",
           "--output-path",
           docs_generation_folder,
           "--hosting-base-path",
           hosting_base_path,
           "--transform-for-static-hosting")
        docs_index_path = File.join(Dir.pwd, "scripts/docs/index.html")
        # clone docs repo
        Dir.mktmpdir do |docs_repo_clone_dir|
          Dir.chdir(docs_repo_clone_dir) do
            sh("git", "clone", docs_repo_url)
            Dir.chdir(docs_repo_name) do
              # copy docs generated in the previous step into the docs folder
              # and push the changes
              docs_destination_folder = "docs/#{version_number}"
              index_destination_path = "docs/index.html"
              FileUtils.mv docs_generation_folder, docs_destination_folder
              FileUtils.cp docs_index_path, index_destination_path

              # using sh instead of fastlane commands because fastlane would run
              # from the repo root
              sh("git", "add", docs_destination_folder)
              sh("git", "add", index_destination_path)
              sh("git", "commit", "-m", "Update documentation for #{version_number}")
              sh("git", "push")
            end
          end
        end
      end
    end
  end

  desc "Create or delete sandbox testers"
  lane :sandbox_testers do
    Spaceship::ConnectAPI.login(use_portal: false)

    UI.deprecated("Email pattern will be used when creating and deleting multiple testers")
    UI.deprecated("fastlane will increment a number before '@'")
    UI.deprecated("Example: testparty.v4@revenuecat.com will make: ")
    UI.deprecated("   testparty.v4.1@revenuecat.com")
    UI.deprecated("   testparty.v4.2@revenuecat.com")
    UI.deprecated("   testparty.v4.3@revenuecat.com")
    email_pattern = UI.input("Sanbox Tester Email pattern:")

    options = ["Create", "Delete"]
    option = UI.select("What do you want to do?", options)

    if option == options[0]
      sandbox_testers_create(email_pattern: email_pattern)
    elsif option == options[1]
      sandbox_testers_delete(email_pattern: email_pattern)
    end
  end

  private_lane :sandbox_testers_delete do |options|
    email_pattern = options[:email_pattern]

    email_prefix = email_pattern.split('@').first

    testers = Spaceship::ConnectAPI::SandboxTester.all.select do |tester|
      tester.email.start_with?(email_prefix)
    end

    UI.important("Found testers:")
    testers.each do |tester|
      UI.message(tester.email)
    end

    if UI.confirm("Do you want to delete these sandbox testers?")
      testers.each do |tester|
        UI.message("Deleting #{tester.email}...")
        tester.delete!
      end
    end
  end

  private_lane :sandbox_testers_create do |options|
    email_pattern = options[:email_pattern]

    number = UI.input("Number of testers:").to_i
    UI.user_error!("Number needs to be more than 0") if number <= 0 
    UI.user_error!("Number needs to be less than 51") if number > 50

    password = UI.input("Sandbox Tester Password (ex: 'SuperSecret01'):")

    question = UI.input("Sandbox Tester Secret Question (ex: 'Secret'):")
    answer = UI.input("Sandbox Tester Secret Answer (ex: 'Answer'):")

    emails = (1..number).map do |i|
      email_pattern.gsub('@', ".#{i.to_s}@")
    end

    emails.each do |email|
      data = {
        first_name: "Tester",
        last_name: "FastlaneCreated",
        email: email,
        password: password,
        confirm_password: password,
        secret_question: question,
        secret_answer: answer,
        birth_date: "1990-01-01",
        app_store_territory: "USA"
      }
      UI.message("Creating #{email}...")
      Spaceship::ConnectAPI::SandboxTester.create(**data)
    end
  end

end

def push_pods
  pod_push(path: "RevenueCat.podspec", synchronous: true)
end

def check_no_git_tag_exists(version_number)
  if git_tag_exists(tag: version_number, remote: true, remote_name: 'origin')
    raise "git tag with version #{version_number} already exists!"
  end
end


def check_no_github_release_exists(version_number)
  found_release_number = get_github_release(url: "revenuecat/purchases-ios", version: version_number)
  raise "Release with version #{version_number} already exists!" unless found_release_number.nil?
end

def carthage_archive
  Dir.chdir("..") do
    # As of Carthage 0.38.0, we still can't archive xcframeworks directly. 
    # there are also some issues which prevent us from archiving frameworks directly, since
    # carthage can't deal with architectures for simulators and for Apple Silicon correctly.
    # We use this script as a workaround until this is fixed. 
    # https://github.com/Carthage/Carthage/releases/0.38.0
    sh("./scripts/carthage.sh", "build", "--no-skip-current")
    sh("./scripts/carthage.sh", "archive", "RevenueCat")
  end
end

lane :check_pods do
  pod_lib_lint(verbose: true, podspec:'RevenueCat.podspec')
end

def increment_build_number(previous_version_number, new_version_number, file_path)
  replace_in(previous_version_number, new_version_number, file_path)
end

def attach_changelog_to_master(version_number)
  current_changelog = File.open("../CHANGELOG.latest.md", 'r')
  master_changelog = File.open("../CHANGELOG.md", 'r')

  current_changelog_data = current_changelog.read
  master_changelog_data = master_changelog.read

  current_changelog.close  
  master_changelog.close

  File.open("../CHANGELOG.md", 'w') { |master_changelog_write_mode|
    version_header = "## #{version_number}"
    whole_file_data = "#{version_header}\n#{current_changelog_data}\n#{master_changelog_data}"
    puts "going to save. Contents - #{whole_file_data}"
    
    master_changelog_write_mode.write(whole_file_data)
  }
end

def replace_in(previous_text, new_text, path, allow_empty=false)
  if new_text.to_s.strip.empty? and not allow_empty
    UI.user_error!("Missing `new_text` in call to `replace_in`, looking for replacement for #{previous_text} 😵.")
  end
  sed_regex = 's|' + previous_text.sub(".", "\\.") + '|' + new_text + '|'
  backup_extension = '.bck'
  sh("sed", '-i', backup_extension, sed_regex, path)
end

def current_version_number
  File.read("../.version")
end

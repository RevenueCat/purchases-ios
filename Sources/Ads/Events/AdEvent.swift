//
//  Copyright RevenueCat Inc. All Rights Reserved.
//
//  Licensed under the MIT License (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      https://opensource.org/licenses/MIT
//
//  AdEvent.swift
//
//  Created by RevenueCat on 1/8/25.

import Foundation

// MARK: - Public Types

/// Shared impression data for all ad events.
public struct AdImpressionData {

    // swiftlint:disable missing_docs
    public var networkName: String
    public var mediatorName: String
    public var placement: String?
    public var adUnitId: String
    public var adInstanceId: String

    public init(
        networkName: String,
        mediatorName: String,
        placement: String? = nil,
        adUnitId: String,
        adInstanceId: String
    ) {
        self.networkName = networkName
        self.mediatorName = mediatorName
        self.placement = placement
        self.adUnitId = adUnitId
        self.adInstanceId = adInstanceId
    }
    // swiftlint:enable missing_docs

}

/// Data for ad displayed events.
public struct AdDisplayed {

    // swiftlint:disable missing_docs
    public var impression: AdImpressionData

    public init(impression: AdImpressionData) {
        self.impression = impression
    }
    // swiftlint:enable missing_docs

}

/// Data for ad opened/clicked events.
public struct AdOpened {

    // swiftlint:disable missing_docs
    public var impression: AdImpressionData

    public init(impression: AdImpressionData) {
        self.impression = impression
    }
    // swiftlint:enable missing_docs

}

/// Data for ad revenue events.
public struct AdRevenue {

    // swiftlint:disable missing_docs
    public var impression: AdImpressionData
    public var revenueMicros: Int
    public var currency: String
    public var precision: Precision

    public init(
        impression: AdImpressionData,
        revenueMicros: Int,
        currency: String,
        precision: Precision
    ) {
        self.impression = impression
        self.revenueMicros = revenueMicros
        self.currency = currency
        self.precision = precision
    }
    // swiftlint:enable missing_docs

}

extension AdRevenue {

    /// Enum representing the level of accuracy for reported revenue values.
    public enum Precision: String {

        /// Revenue value is exact and confirmed
        case exact

        /// Revenue value is defined by the publisher
        case publisherDefined = "publisher_defined"

        /// Revenue value is an estimate
        case estimated

        /// Revenue value accuracy cannot be determined
        case unknown

    }

}

// MARK: - Internal Event Enum

/// Internal event enum for type-safe routing through the events system.
internal enum AdEvent: FeatureEvent {

    // swiftlint:disable type_name

    /// An identifier that represents an ad event.
    internal typealias ID = UUID

    // swiftlint:enable type_name

    /// An identifier that represents an ad session.
    internal typealias SessionID = UUID

    var feature: Feature {
        return .ads
    }

    var eventDiscriminator: String? {
        return nil
    }

    /// An ad impression was displayed.
    case displayed(CreationData, AdDisplayed)

    /// An ad was opened/clicked.
    case opened(CreationData, AdOpened)

    /// An ad impression generated revenue.
    case revenue(CreationData, AdRevenue)

}

extension AdEvent {

    /// Internal creation metadata that is automatically generated by the SDK.
    internal struct CreationData {

        internal var id: ID
        internal var date: Date

        internal init(
            id: ID = .init(),
            date: Date = .init()
        ) {
            self.id = id
            self.date = date
        }

    }

}

extension AdEvent {

    /// - Returns: the underlying ``AdEvent/CreationData-swift.struct`` for this event.
    internal var creationData: CreationData {
        switch self {
        case let .displayed(creationData, _): return creationData
        case let .opened(creationData, _): return creationData
        case let .revenue(creationData, _): return creationData
        }
    }

    /// - Returns: the underlying impression data for this event.
    internal var impression: AdImpressionData {
        switch self {
        case let .displayed(_, displayed):
            return displayed.impression
        case let .opened(_, opened):
            return opened.impression
        case let .revenue(_, revenue):
            return revenue.impression
        }
    }

    /// - Returns: the underlying ``AdRevenue`` for revenue events.
    internal var revenueData: AdRevenue? {
        switch self {
        case .displayed, .opened:
            return nil
        case let .revenue(_, revenueData):
            return revenueData
        }
    }

}

// MARK: - Protocol Conformances

extension AdImpressionData: Equatable, Codable, Sendable {}
extension AdDisplayed: Equatable, Codable, Sendable {}
extension AdOpened: Equatable, Codable, Sendable {}
extension AdRevenue: Equatable, Codable, Sendable {}
extension AdRevenue.Precision: Codable, Sendable {}
extension AdEvent.CreationData: Equatable, Codable, Sendable {}
extension AdEvent: Equatable, Codable, Sendable {}

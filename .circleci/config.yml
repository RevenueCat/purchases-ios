release-tags-and-branches: &release-tags-and-branches
  filters:
    tags:
      ignore: /^.*-SNAPSHOT/
    branches:
      only: /^release\/.*/

release-branches: &release-branches
  filters:
    tags:
      ignore: /.*/
    branches:
      only: /^release\/.*/

release-tags: &release-tags
  filters: 
    tags:
      ignore: /^.*-SNAPSHOT/
    branches:
      ignore: /.*/


version: 2.1
commands:
  install-dependencies:
    parameters:
      directory:
        type: string
        default: .
    steps:
       # Bundler
      - restore_cache:
          keys: 
            - v1-gem-cache-{{ checksum "Gemfile.lock" }}
      - run: 
          name: Bundle install
          working_directory: << parameters.directory >>
          command: bundle install --clean --path vendor/bundle
      - save_cache:
          key: v1-gem-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Install swiftlint
          command: brew install swiftlint

  scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - run: 
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan

      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - run:
          name: Archive
          working_directory: << parameters.directory >>
          command: |
              bundle exec fastlane archive
  
  install-dependencies-scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - install-dependencies:
          directory: << parameters.directory >>
      - scan-and-archive:
          directory: << parameters.directory >>

  trust-github-key:
    steps:
      - run:
          name: Trust GitHub key
          command: |
              for ip in $(dig @8.8.8.8 github.com +short); \
              do ssh-keyscan github.com,$ip; \
              ssh-keyscan $ip; \
              done 2>/dev/null >> ~/.ssh/known_hosts

  update-spm-integration-commit:
    steps:
      - install-dependencies
      - run:
          name: Update git commit in targets that use SPM for dependencies
          command: |
              bundle exec fastlane update_swift_package_commit

  update-carthage-integration-commit:
    steps:
      - install-dependencies
      - run:
          name: Update git commit in Carthage Integration tests
          working_directory: IntegrationTests/CarthageIntegration/
          command: |
              bundle exec fastlane update_carthage_commit

jobs:
  runtest:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      
      - install-dependencies
      
      - run:
          name: Run tests
          command: bundle exec fastlane scan
          environment:
            SCAN_SCHEME: Unit Tests
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
  buildTvWatchAndMacOS:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: Install swiftlint
          command: brew install swiftlint
      - install-dependencies
      - run:
          name: Build AppleTV, WatchOS, and macOS
          command: bundle exec fastlane build_tv_watch_mac            
  apitest:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: Build APITester
          command: xcodebuild -target APITester

  storekit_tests:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: Open simulator
          command: xcrun instruments -w "iPhone 11 Pro (14.5) [" || true
      
      - install-dependencies
      
      - run:
          name: Run StoreKit Tests
          command: bundle exec fastlane storekit_tests
          environment:
            SCAN_DEVICE: iPhone 11 Pro (14.5)
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html


  deployment-checks: 
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - trust-github-key

      # Bundler
      - restore_cache:
          keys: 
            - v1-gem-cache-{{ checksum "Gemfile.lock" }}
      - run: bundle install --clean --path vendor/bundle
      - save_cache:
          key: v1-gem-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      
      - update-spm-integration-commit
      
      - run:
          name: Deployment checks
          command: bundle exec fastlane deployment_checks
          environment:
            SCAN_SCHEME: All Tests
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
          
  docs-deploy:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Build docs
          command: bundle exec fastlane run jazzy
      - run:
          name: Install awscli
          command: sudo python3 -m pip install awscli
      - run:
          name: Deploy to S3
          command: aws s3 sync docs s3://purchases-docs/ios --delete --acl public-read
      - run:
          name: Invalidate CloudFront caches
          command: aws cloudfront create-invalidation --distribution-id EPTW7F3CB566V --paths "/*"
  
  make-release:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - trust-github-key
      - update-spm-integration-commit
      - run:
          name: Deploy new version
          command: bundle exec fastlane deploy

  prepare-next-version:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-dependencies
      - trust-github-key
      - run:
          name: Prepare next version
          command: bundle exec fastlane prepare_next_version

  integration-tests-cocoapods:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      
      - install-dependencies
      - install-dependencies:
          directory: IntegrationTests/CocoapodsIntegration

      - run:
          name: Install Pods
          working_directory: IntegrationTests/CocoapodsIntegration/
          command: |
              pod install
      
      - scan-and-archive:
          directory: IntegrationTests/CocoapodsIntegration
      
  integration-tests-swift-package-manager:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - trust-github-key
      - update-spm-integration-commit
      - install-dependencies-scan-and-archive:
          directory: IntegrationTests/SPMIntegration/

  integration-tests-carthage:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - trust-github-key
      - update-carthage-integration-commit
      # Carthage
      - restore_cache:
          keys: 
            - carthage-cache-{{ checksum "Cartfile.resolved" }}
      - run:
          name: Carthage Update
          working_directory: IntegrationTests/CarthageIntegration/
          # install without building, then remove the tests and build, so that carthage
          # doesn't try to build the other integration tests
          command: |
              ./carthage.sh update --no-build
              rm -rf Carthage/Checkouts/purchases-root/IntegrationTests/
              ./carthage.sh build
      - save_cache:
          key: carthage-cache-{{ checksum "Cartfile.resolved" }}
          paths:
            - Carthage

      - install-dependencies-scan-and-archive:
          directory: IntegrationTests/CarthageIntegration/

  integration-tests-xcode-direct-integration:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout

      - install-dependencies-scan-and-archive:
          directory: IntegrationTests/XcodeDirectIntegration/

  lint:
    macos:
      xcode: "12.5.1"
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run fastlane swiftlint lane
          command: fastlane run swiftlint raise_if_swiftlint_error:true strict:true

workflows:
  version: 2
  build-test:
    jobs:
      - lint
      - runtest
      - apitest
      - buildTvWatchAndMacOS
      - storekit_tests: *release-tags-and-branches
      - deployment-checks: *release-branches
      - integration-tests-cocoapods: *release-tags-and-branches
      - integration-tests-swift-package-manager: *release-tags-and-branches
      - integration-tests-carthage: *release-tags-and-branches
      - integration-tests-xcode-direct-integration: *release-tags-and-branches
  deploy:
    jobs:
      - make-release: *release-tags
      - prepare-next-version: *release-tags
      - docs-deploy: *release-tags


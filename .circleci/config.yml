orbs:
  macos: circleci/macos@2.5.1
  slack: circleci/slack@4.10.1
  # Disabled until compatible with M1: codecov: codecov/codecov@3.3.0
  # codecov: codecov/codecov@3.3.0

version: 2.1

parameters:
  action:
    type: enum
    enum: [default, bump, run-manual-tests, run-manual-docs-deploy]
    default: default
  generate_snapshots:
    default: false
    type: boolean
  generate_revenuecatui_snapshots:
    default: false
    type: boolean

# params used by the trigger CircleCI Pipeline GitHub Action: https://github.com/marketplace/actions/trigger-circleci-pipeline
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

executors:
  macos-executor:
    parameters:
      xcode_version:
        type: string
        default: '15.3'
    macos:
      xcode: << parameters.xcode_version >>
    resource_class: macos.m1.medium.gen1
    environment:
      CIRCLECI_TESTS_GENERATE_SNAPSHOTS: << pipeline.parameters.generate_snapshots >>
      CIRCLECI_TESTS_GENERATE_REVENUECAT_UI_SNAPSHOTS: << pipeline.parameters.generate_revenuecatui_snapshots >>
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
  macos-executor-large:
    parameters:
      xcode_version:
        type: string
        default: '15.3'
    macos:
      xcode: << parameters.xcode_version >>
    resource_class: macos.m1.large.gen1
    environment:
      CIRCLECI_TESTS_GENERATE_SNAPSHOTS: << pipeline.parameters.generate_snapshots >>
      CIRCLECI_TESTS_GENERATE_REVENUECAT_UI_SNAPSHOTS: << pipeline.parameters.generate_revenuecatui_snapshots >>
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail

aliases:
  release-branches: &release-branches
    filters:
      tags:
        ignore: /.*/
      branches:
        only: /^release\/.*/
  release-tags: &release-tags
    filters:
      tags:
        ignore: 
          - /^.*-SNAPSHOT/
          - /^.*-customercenter.alpha.*/
      branches:
        ignore: /.*/
  release-branches-and-main: &release-branches-and-main
    filters:
      tags:
        ignore: /.*/
      branches:
        only:
          - main
          - paywalls
          - /^release\/.*/
  only-main-branch: &only-main-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: main

commands:
  install-runtime:
    parameters:
      runtime-name:
        type: string
    steps:
       - install-brew-dependency:
           dependency_name: 'xcodes'
       - run:
           name: Install simulator
           command: | # Print all available simulators and install required one
               xcodes runtimes
               sudo xcodes runtimes install "<< parameters.runtime-name >>"

  install-bundle-dependencies:
    parameters:
      directory:
        type: string
        default: .
    steps:
      - restore_cache:
          keys:
            - v2-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
      # CircleCI images fail on Ruby 3.3
      # https://github.com/fastlane/fastlane/issues/21794#issuecomment-2021331335
      # Also, not using macos/switch-ruby because its broken
      - run:
          name: Set Ruby 3.2.2
          command: |
            eval "$(rbenv init -)"
            rbenv install -s 3.2.2  # Replace with your required Ruby version
            rbenv global 3.2.2
            rbenv rehash
      - run:
          name: Verify Ruby version
          command: ruby -v
      - run:
          name: Bundle install
          working_directory: << parameters.directory >>
          command: |
            bundle config set --local clean 'true'
            bundle config set --local path 'vendor/bundle'
            bundle install
      - save_cache:
          key: v2-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

  install-dependencies:
    parameters:
      directory:
        type: string
        default: .
      install_xcbeautify:
        type: boolean
        default: true
      install_mint:
        type: boolean
        default: false
      install_swiftlint:
        type: boolean
        default: true
    steps:
      - install-bundle-dependencies:
          directory: << parameters.directory >>
      - restore_cache:
          keys:
            - homebrew-cache-{{ checksum "Brewfile.lock.json" }}-{{ arch }}
      - when:
          condition: << parameters.install_xcbeautify >>
          steps:
            - install-brew-dependency:
                dependency_name: "xcbeautify"
      - when:
          condition: << parameters.install_mint >>
          steps:
            - install-brew-dependency:
                dependency_name: "mint"
      - when:
          condition: << parameters.install_swiftlint >>
          steps:
            - install-brew-dependency:
                dependency_name: "swiftlint"
      - run: brew tap robotsandpencils/made
      - save_cache:
          key: homebrew-cache-{{ checksum "Brewfile.lock.json" }}-{{ arch }}
          paths:
            - /usr/local/Cellar/swiftlint/
            - /usr/local/Cellar/xcbeautify/
            - /Users/$USER/Library/Caches/Homebrew/

  install-brew-dependency:
    parameters:
      dependency_name:
        type: string
    steps:
      - run:
          name: Install << parameters.dependency_name >>
          command: |
            # Link dependency in case it was found in the cache
            brew link << parameters.dependency_name >> || true

            if which << parameters.dependency_name >> > /dev/null 2>&1; then
                echo "Skipping installation, already found."
                exit 0;
            fi
            brew install << parameters.dependency_name >>
          environment:
            HOMEBREW_NO_INSTALL_CLEANUP: 1

  install-xcbeautify-for-xcode14:
    description: "Installs xcbeautify using Mint"
    steps:
      - run:
          name: Install xcbeautify using Mint
          command: mint install cpisciotta/xcbeautify@1.6.0

  install-rubydocker-dependencies:
    steps:
      - restore_cache:
          keys:
            - v1-rubydocker-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Bundle install
          command: bundle install --clean --path vendor/bundle
      - save_cache:
          key: v1-rubydocker-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

  compress_result_bundle:
    parameters:
      directory:
        type: string
      bundle_name:
        type: string
    steps:
      - run:
          name: Compress result bundle
          command: |
            tar -czf << parameters.bundle_name >>.xcresult.tar.gz << parameters.bundle_name >>.xcresult && \
            rm -r << parameters.bundle_name >>.xcresult
          working_directory: << parameters.directory >>
          when: always

  scan:
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html

  scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - run:
          name: Archive
          working_directory: << parameters.directory >>
          command: |
            bundle exec fastlane archive

  scan-and-archive-all-platforms:
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - run:
          name: Archive all platforms
          working_directory: << parameters.directory >>
          command: |
            bundle exec fastlane archive_all_platforms

  install-dependencies-scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - install-dependencies:
          directory: << parameters.directory >>
      - scan-and-archive:
          directory: << parameters.directory >>

  setup-git-credentials:
    steps:
      - run:
          name: Setup Git config
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_USERNAME

  trust-github-key:
    steps:
      - run:
          name: Trust GitHub key
          command: |
            for ip in $(dig @8.8.8.8 github.com +short); \
            do ssh-keyscan github.com,$ip; \
            ssh-keyscan $ip; \
            done 2>/dev/null >> ~/.ssh/known_hosts

  update-spm-installation-commit:
    steps:
      - run:
          name: Update git commit in targets that use SPM for dependencies
          command: |
            bundle exec fastlane update_swift_package_commit

  update-carthage-installation-commit:
    steps:
      - install-dependencies
      - run:
          name: Update git commit in Carthage Installation tests
          working_directory: Tests/InstallationTests/CarthageInstallation/
          command: |
            bundle exec fastlane update_carthage_commit

  create-snapshot-pr-if-needed:
    parameters:
      version:
        type: string
      job:
        type: string
      condition:
        type: boolean
    steps:
      - when:
          condition: << parameters.condition >>
          steps:
            - setup-git-credentials
            - run:
                name: Run << parameters.job >>
                command: bundle exec fastlane << parameters.job >> version:"<< parameters.version >>"

  run-backend-tests:
    parameters:
      test_plan:
        type: string
    steps:
      - checkout
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: Run backend_integration Tests
          command: bundle exec fastlane backend_integration_tests test_plan:"<< parameters.test_plan >>"
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 15 (17.4.0)
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: BackendIntegrationTests
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

jobs:
  spm-release-build-xcode-14:
    executor:
      name: macos-executor
      xcode_version: '14.3.0'

    steps:
      - checkout
      - run:
          name: SPM Release Build
          command: swift build -c release --target RevenueCat
          no_output_timeout: 30m

  spm-release-build-xcode-15:
    executor:
      name: macos-executor
      xcode_version: '15.2.0'

    steps:
      - checkout
      - run:
          name: SPM Release Build
          command: swift build -c release --target RevenueCat
          no_output_timeout: 30m

  spm-xcode-14-1:
    executor:
      name: macos-executor
      xcode_version: '14.1.0'

    steps:
      - checkout
      - run:
          name: SPM RevenueCat Release Build
          command: swift build -c release --target RevenueCat
          no_output_timeout: 30m
      - run:
          name: SPM RevenueCatUI Release Build
          command: swift build -c release --target RevenueCatUI
          no_output_timeout: 30m

  pod-lib-lint:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Check pods and deployment targets
          command: bundle exec fastlane check_pods

  spm-release-build:
    executor:
      name: macos-executor
    steps:
      - checkout
      - run:
          name: SPM Release Build
          command: swift build -c release --target RevenueCat
          no_output_timeout: 30m
      - run:
          name: SPM RevenueCatUI Release Build
          command: swift build -c release --target RevenueCatUI
          no_output_timeout: 30m

  api-tests:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - run:
          name: API Tests
          command: bundle exec fastlane run_api_tests

  spm-receipt-parser:
    executor:
      name: macos-executor
    steps:
      - checkout
      - run:
          name: SPM Receipt Parser
          command: swift build -c release --target ReceiptParser
          no_output_timeout: 30m

  spm-revenuecat-ui-ios-15:
    executor:
      name: macos-executor
      xcode_version: '14.3.0'

    steps:
      - checkout
      - install-dependencies:
          install_swiftlint: false
      - update-spm-installation-commit
      - run:
          name: SPM RevenueCatUI Tests
          command: bundle exec fastlane test_revenuecatui
          no_output_timeout: 5m
          environment:
            DEVICE: iPhone 13,OS=15.5
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_revenuecatui_snapshots >>
          job: "create_snapshots_repo_pr"
          version: "revenuecatui-15"
      - compress_result_bundle:
          directory: fastlane/test_output
          bundle_name: revenuecatui
      - store_test_results:
          path: fastlane/test_output/revenuecatui/tests.xml
      - store_artifacts:
          path: fastlane/test_output
          destination: scan-test-output

  spm-revenuecat-ui-ios-16:
    executor:
      name: macos-executor
      xcode_version: '15.4.0'

    steps:
      - checkout
      - install-dependencies:
          install_swiftlint: false
      - update-spm-installation-commit
      - run:
          name: SPM RevenueCatUI Release Build
          command: swift build -c release --target RevenueCatUI
          no_output_timeout: 5m
      - run:
          name: SPM RevenueCatUI Tests
          command: bundle exec fastlane test_revenuecatui
          no_output_timeout: 5m
          environment:
            DEVICE: iPhone 14,OS=16.4
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_revenuecatui_snapshots >>
          job: "create_snapshots_repo_pr"
          version: "revenuecatui-16"
      - compress_result_bundle:
          directory: fastlane/test_output
          bundle_name: revenuecatui
      - store_test_results:
          path: fastlane/test_output/revenuecatui/tests.xml
      - store_artifacts:
          path: fastlane/test_output
          destination: scan-test-output

  run-revenuecat-ui-ios-17:
    executor:
      name: macos-executor
      xcode_version: '15.2.0'

    steps:
      - checkout
      - install-dependencies:
          install_swiftlint: false
      - update-spm-installation-commit
      - run:
          name: SPM RevenueCatUI Release Build
          command: swift build -c release --target RevenueCatUI
          no_output_timeout: 5m
      - run:
          name: SPM RevenueCatUI Tests
          command: bundle exec fastlane test_revenuecatui
          no_output_timeout: 15m
          environment:
            DEVICE: iPhone 15 Pro,OS=17.2
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_revenuecatui_snapshots >>
          job: "create_snapshots_repo_pr"
          version: "revenuecatui-17"
      - compress_result_bundle:
          directory: fastlane/test_output
          bundle_name: revenuecatui
      - store_test_results:
          path: fastlane/test_output/revenuecatui/tests.xml
      - store_artifacts:
          path: fastlane/test_output
          destination: scan-test-output

  spm-revenuecat-ui-watchos:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: SPM RevenueCatUI Tests
          command: bundle exec fastlane test_revenuecatui
          no_output_timeout: 15m
          environment:
            PLATFORM: watchOS Simulator
            DEVICE: Apple Watch Series 9 (45mm),OS=10.4
            BUILD_SDK: watchsimulator
      - compress_result_bundle:
          directory: fastlane/test_output
          bundle_name: revenuecatui
      - store_test_results:
          path: fastlane/test_output/revenuecatui/tests.xml
      - store_artifacts:
          path: fastlane/test_output
          destination: scan-test-output

  run-test-macos:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run tests
          command: bundle exec fastlane mac test_macos
          no_output_timeout: 15m
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/macos
          bundle_name: RevenueCat
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_snapshots >>
          job: "create_snapshot_pr"
          version: "macos"
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-17:
    executor:
      name: macos-executor
      xcode_version: '15.2.0'

    steps:
      - checkout
      - install-dependencies:
          install_swiftlint: false
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 15m
          environment:
            SCAN_DEVICE: iPhone 15 (17.2.0)
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: RevenueCat
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_snapshots >>
          job: "create_snapshot_pr"
          version: "ios-17"
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-16:
    executor:
      name: macos-executor
      xcode_version: '15.4.0'

    steps:
      - checkout
      - install-dependencies:
          install_swiftlint: false
      - update-spm-installation-commit
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 14 (16.4)
      # Disabled until it's compatible with M1: https://github.com/codecov/feedback/issues/51
      # - codecov/upload:
      #     xtra_args: "-v --xc --xp fastlane/test_output/xctest/ios/RevenueCat.xcresult --preventSymbolicLinks=true"
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: RevenueCat
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_snapshots >>
          job: "create_snapshot_pr"
          version: "ios-16"
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-15:
    executor:
      name: macos-executor
      xcode_version: '14.3.0'

    steps:
      - checkout
      - install-dependencies:
          install_swiftlint: false
      - update-spm-installation-commit
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 13 (15.5)
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: RevenueCat
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_snapshots >>
          job: "create_snapshot_pr"
          version: "ios-15"
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-tvos:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run tests
          command: bundle exec fastlane test_tvos
          no_output_timeout: 5m
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/tvos
          bundle_name: RevenueCat
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-watchos:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run tests
          command: bundle exec fastlane test_watchos
          no_output_timeout: 5m
          environment:
            SCAN_PLATFORM: watchOS Simulator
            SCAN_DEVICE: Apple Watch Series 9 (45mm) (10.4)
            BUILD_SDK: watchsimulator
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/watchos
          bundle_name: RevenueCat
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_snapshots >>
          job: "create_snapshot_pr"
          version: "watchos"
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-14:
    executor:
      name: macos-executor
    # Pre-iOS 15 requires macOS 12 which requires Xcode 14.2
    # See https://circleci.com/docs/using-macos/#supported-xcode-versions
      xcode_version: '14.2.0'

    steps:
      - checkout
      - install-dependencies:
          install_xcbeautify: false
          install_mint: true
          install_swiftlint: false
      - install-xcbeautify-for-xcode14
      - update-spm-installation-commit
      - install-runtime:
          runtime-name: iOS 14.5
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios skip_sk_tests:true
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 12 (14.5)
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: RevenueCat
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_snapshots >>
          job: "create_snapshot_pr"
          version: "ios-14"
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-13:
    executor:
      name: macos-executor
      xcode_version: '14.2.0'

    steps:
      - checkout
      - install-dependencies:
          install_xcbeautify: false
          install_mint: true
          install_swiftlint: false
      - macos/install-rosetta
      - install-xcbeautify-for-xcode14
      - update-spm-installation-commit
      - install-runtime:
          runtime-name: iOS 13.7
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 11 (13.7)
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: RevenueCat
      - create-snapshot-pr-if-needed:
          condition: << pipeline.parameters.generate_snapshots >>
          job: "create_snapshot_pr"
          version: "ios-13"
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  build-tv-watch-and-macos:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Build tvOS, watchOS and macOS
          command: bundle exec fastlane build_tv_watch_mac
          no_output_timeout: 30m

  build-visionos:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Build visionOS
          command: bundle exec fastlane build_visionos
          no_output_timeout: 30m

  backend-integration-tests-SK1:
    executor:
      name: macos-executor
    steps:
      - run-backend-tests:
          test_plan: "BackendIntegrationTests-SK1"

  backend-integration-tests-SK2:
    executor:
      name: macos-executor
    steps:
      - run-backend-tests:
          test_plan: "BackendIntegrationTests-SK2"

  backend-integration-tests-other:
    executor:
      name: macos-executor
    steps:
      - run-backend-tests:
          test_plan: "BackendIntegrationTests-Other"

  backend-integration-tests-offline:
    executor:
      name: macos-executor
    steps:
      - run-backend-tests:
          test_plan: "BackendIntegrationTests-Offline"

  backend-integration-tests-custom-entitlements:
    executor:
      name: macos-executor
    steps:
      - run-backend-tests:
          test_plan: "BackendIntegrationTests-CustomEntitlements"

  release-checks:
    executor:
      name: macos-executor
    steps:
      - checkout
      - trust-github-key
      # Bundler
      - restore_cache:
          keys:
            - v2-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run: bundle install --clean --path vendor/bundle
      - save_cache:
          key: v2-gem-cache-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: Deployment checks
          command: bundle exec fastlane release_checks
          environment:
            SCAN_SCHEME: All Tests
          no_output_timeout: 30m
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - store_artifacts:
          path: RevenueCat.xcframework.zip
          destination: RevenueCat.xcframework.zip
      - store_artifacts:
          path: RevenueCatUI.xcframework.zip
          destination: RevenueCatUI.xcframework.zip

  docs-build:
    executor:
      name: macos-executor
      # needs to be xcode 14 since we couldn't get xcode 15 to get along with --additional-symbol-graph-dir
      # https://github.com/RevenueCat/purchases-ios/pull/1997
      xcode_version: '14.3.0'
    steps:
      - setup-git-credentials
      - checkout
      - install-bundle-dependencies
      - run:
          name: Build docs
          command: bundle exec fastlane build_docs
          environment:
            DOCS_IOS_VERSION: "17.4"

  docs-deploy:
    executor:
      name: macos-executor
      # needs to be xcode 14 since we couldn't get xcode 15 to get along with --additional-symbol-graph-dir
      # https://github.com/RevenueCat/purchases-ios/pull/1997
      xcode_version: '14.3.0'
    steps:
      - setup-git-credentials
      - checkout
      - install-bundle-dependencies
      - run:
          name: Build docs
          command: bundle exec fastlane build_and_publish_docs
          environment:
            DOCS_IOS_VERSION: "17.4"

  make-release:
    executor:
      name: macos-executor
    steps:
      - checkout
      - trust-github-key
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: Deploy new version
          command: bundle exec fastlane release
          no_output_timeout: 30m

  push-revenuecat-pod:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-bundle-dependencies
      - trust-github-key
      - run:
          name: Deploy new version
          command: bundle exec fastlane push_revenuecat_pod
          no_output_timeout: 30m

  push-revenuecatui-pod:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-bundle-dependencies
      - trust-github-key
      - run:
          name: Deploy new version
          command: bundle exec fastlane push_revenuecatui_pod
          no_output_timeout: 30m

  prepare-next-version:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - setup-git-credentials
      - trust-github-key
      - run:
          name: Prepare next version
          command: bundle exec fastlane prepare_next_version

  installation-tests-cocoapods:
    executor:
      name: macos-executor
    steps:
      - checkout
      - install-dependencies
      - install-dependencies:
          directory: Tests/InstallationTests/CocoapodsInstallation
      - run:
          name: Install Pods
          working_directory: Tests/InstallationTests/CocoapodsInstallation/
          command: |
            bundle exec pod install
      - scan-and-archive:
          directory: Tests/InstallationTests/CocoapodsInstallation

  installation-tests-swift-package-manager:
    executor:
      name: macos-executor
    steps:
      - checkout
      - trust-github-key
      - install-dependencies
      - update-spm-installation-commit
      - install-dependencies:
          directory: Tests/InstallationTests/SPMInstallation/
      - scan-and-archive-all-platforms:
          directory: Tests/InstallationTests/SPMInstallation/

  installation-tests-custom-entitlement-computation-swift-package-manager:
    executor:
      name: macos-executor
    steps:
      - checkout
      - trust-github-key
      - install-dependencies
      - update-spm-installation-commit
      - install-dependencies:
          directory: Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/
      - scan:
          directory: Tests/InstallationTests/SPMCustomEntitlementComputationInstallation/

  installation-tests-receipt-parser:
    executor:
      name: macos-executor
    steps:
      - checkout
      - trust-github-key
      - install-dependencies
      - update-spm-installation-commit
      - install-dependencies:
          directory: Tests/InstallationTests/ReceiptParserInstallation/
      - scan-and-archive-all-platforms:
          directory: Tests/InstallationTests/ReceiptParserInstallation/

  installation-tests-carthage:
    executor:
      name: macos-executor-large
    steps:
      - checkout
      - trust-github-key
      - run:
          name: Upgrade Carthage
          command: |
            brew update
            brew upgrade carthage
      - update-carthage-installation-commit
      # Carthage
      - run:
          name: Carthage Update
          working_directory: Tests/InstallationTests/CarthageInstallation/
          command: |
            bundle exec fastlane installation_tests

      - install-dependencies-scan-and-archive:
          directory: Tests/InstallationTests/CarthageInstallation/

  installation-tests-xcode-direct-integration:
    executor:
      name: macos-executor
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout

      - install-dependencies-scan-and-archive:
          directory: Tests/InstallationTests/XcodeDirectInstallation/

  lint:
    executor:
      name: macos-executor
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-dependencies
      - run:
          command: mkdir -p fastlane/test_output/swiftlint
      - run:
          name: Run fastlane swiftlint lane
          command: |
            bundle exec fastlane run swiftlint raise_if_swiftlint_error:true strict:true \
            reporter:junit output_file:fastlane/test_output/swiftlint/junit.xml
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output

  danger:
    docker:
      - image: cimg/ruby:3.1.2
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-rubydocker-dependencies
      - run:
          name: Run Danger
          command: bundle exec danger --verbose

  tag-release-branch:
    docker:
      - image: cimg/ruby:3.1.2
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - setup-git-credentials
      - trust-github-key
      - install-rubydocker-dependencies
      - run:
          name: Tag branch
          command: bundle exec fastlane tag_current_branch

  release-train:
    executor:
      name: macos-executor
    steps:
      - checkout
      - setup-git-credentials
      - trust-github-key
      - install-dependencies
      - run:
          name: Create automatic PR
          command: bundle exec fastlane automatic_bump github_rate_limit:10

  integration-tests-all:
    executor:
      name: macos-executor
    steps:
      - checkout
      - setup-git-credentials
      - trust-github-key
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: Backend and LoadShedder integration tests
          command: bundle exec fastlane backend_integration_tests test_plan:"BackendIntegrationTests-All-CI"
          no_output_timeout: 5m
          environment:
            SCAN_DEVICE: iPhone 14 (17.2.0)
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: BackendIntegrationTests
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  loadshedder-integration-tests-v3:
    executor:
      name: macos-executor
    steps:
      - checkout
      - setup-git-credentials
      - trust-github-key
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: V3 LoadShedder integration tests
          command: bundle exec fastlane v3_loadshedder_integration_tests
      - compress_result_bundle:
          directory: fastlane/test_output/xctest/ios
          bundle_name: v3LoadShedderIntegration

  deploy-purchase-tester:
    executor:
      name: macos-executor
    parameters:
      dry_run:
        type: boolean
        default: false
    steps:
      - checkout
      - setup-git-credentials
      - trust-github-key
      - install-dependencies
      - update-spm-installation-commit
      - run:
          name: Submit Purchase Tester
          command: bundle exec fastlane deploy_purchase_tester dry_run:<< parameters.dry_run >>

  deploy-to-spm:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - setup-git-credentials
      - run:
          name: Clone purchases-ios and push to purchases-ios-spm
          command: |
            git clone https://github.com/RevenueCat/purchases-ios.git
            cd purchases-ios
            git fetch --tags
            git remote set-url origin https://github.com/RevenueCat/purchases-ios-spm.git
            git push origin
            git push --tags

workflows:
  version: 2
  generate-snapshot:
    when: << pipeline.parameters.generate_snapshots >>
    jobs:
      - run-test-ios-17
      - run-test-ios-16
      - run-test-ios-15
      - run-test-ios-14
      - run-test-ios-13
      - run-test-macos
      - run-test-watchos

  generate_revenuecatui_snapshots:
    when: << pipeline.parameters.generate_revenuecatui_snapshots >>
    jobs:
      - spm-revenuecat-ui-ios-15
      - spm-revenuecat-ui-ios-16
      - run-revenuecat-ui-ios-17

  build-test:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.generate_snapshots >>
        - not: << pipeline.parameters.generate_revenuecatui_snapshots >>
    jobs:
      - lint
      - run-test-ios-17
      - pod-lib-lint
      - run-revenuecat-ui-ios-17

  create-tag:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - matches: 
            pattern: "^release/.*$"
            value: << pipeline.git.branch >>
    jobs:
      - release-checks
      - hold:
          type: approval
          requires:
            - release-checks
      - tag-release-branch:
          requires:
            - hold

  deploy-tag:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - make-release:
          <<: *release-tags
      - push-revenuecat-pod:
          requires:
            - make-release
          <<: *release-tags
      - push-revenuecatui-pod:
          requires:
            - push-revenuecat-pod
          <<: *release-tags
      - deploy-to-spm:
          requires:
            - make-release
          <<: *release-tags
      - docs-deploy:
          requires:
            - make-release
          <<: *release-tags
      - deploy-purchase-tester:
          dry_run: false
          requires:
            - make-release
          <<: *release-tags

  snapshot-bump:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - prepare-next-version:
          <<: *only-main-branch

  danger:
    jobs:
      - danger

  weekly-run-workflow:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release-train", << pipeline.schedule.name >>]
    jobs:
      - release-train

  daily-loadshedder-integration-tests:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal:
            ["load_shedder_integration_tests", << pipeline.schedule.name >>]
    jobs:
      - loadshedder-integration-tests-v3
      - integration-tests-all

  manual-trigger-bump:
    when:
      equal: [bump, << pipeline.parameters.action >>]
    jobs:
      - release-train

  manual-trigger-docs-deploy:
    when:
      equal: [run-manual-docs-deploy, << pipeline.parameters.action >>]
    jobs:
      - docs-deploy

  # To trigger tests manually, log into circleCI, select the project, a branch, and then click "Trigger Pipeline"
  # in the top right hand corner of the screen. In the modal that appears, set the following parameter fields 
  # and click "Trigger Pipeline" to begin the pipeline:
  #   - Parameter Type: string
  #   - Name: action
  #   - Value: run-manual-tests
  all-tests:
    when:
      or:
        - matches: 
            pattern: "^release/.*$"
            value: << pipeline.git.branch >>
        - equal:
            - "run-manual-tests"
            - << pipeline.parameters.action >>
        - equal: 
            - "run-from-github-comments"
            - << pipeline.parameters.GHA_Meta >>
    jobs:
      - backend-integration-tests-SK1
      - backend-integration-tests-SK2
      - backend-integration-tests-custom-entitlements
      - backend-integration-tests-other
      - build-tv-watch-and-macos
      - build-visionos
      - docs-build
      - run-test-ios-14
      - run-test-ios-15
      - run-test-ios-16
      - run-test-macos
      - run-test-tvos
      - run-test-watchos
      - spm-receipt-parser
      - spm-release-build
      - spm-release-build-xcode-14
      - spm-release-build-xcode-15
      - spm-revenuecat-ui-ios-15
      - spm-revenuecat-ui-ios-16
      - run-revenuecat-ui-ios-17
      - spm-revenuecat-ui-watchos
      - installation-tests-cocoapods
      - installation-tests-swift-package-manager
      - installation-tests-custom-entitlement-computation-swift-package-manager
      - installation-tests-carthage
      - installation-tests-xcode-direct-integration
      - installation-tests-receipt-parser
      - api-tests
      - deploy-purchase-tester:
          dry_run: true
      
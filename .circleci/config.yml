orbs:
   macos: circleci/macos@2.0.1

version: 2.1

aliases:
  base-job: &base-job
    resource_class: macos.x86.medium.gen2
    macos:
      xcode: << parameters.xcode_version >>
    parameters:
      xcode_version:
        type: string
    working_directory: ~/purchases-ios
    shell: /bin/bash --login -o pipefail
  release-tags-and-branches: &release-tags-and-branches
    filters:
      tags:
        ignore: /^.*-SNAPSHOT/
      branches:
        only: /^release\/.*/
  release-branches: &release-branches
    filters:
      tags:
        ignore: /.*/
      branches:
        only: /^release\/.*/
  release-tags: &release-tags
    filters: 
      tags:
        ignore: /^.*-SNAPSHOT/
      branches:
        ignore: /.*/
  release-branches-and-main: &release-branches-and-main
    filters:
      tags:
        ignore: /.*/
      branches:
        only:
          - main
          - /^release\/.*/

commands:
  install-and-create-sim:
    parameters:
      install-name:
        type: string
      sim-device-type:
        type: string
      sim-device-runtime:
        type: string
      sim-name:
        type: string
    steps:
      - run:
          name: Install xcode-install
          command: gem install xcode-install
      - run:
          name: Install simulator
          command: xcversion simulators --install="<< parameters.install-name >>"
      - run:
          name: Create simulator
          command: xcrun simctl create '<< parameters.sim-name >>' com.apple.CoreSimulator.SimDeviceType.<< parameters.sim-device-type >> com.apple.CoreSimulator.SimRuntime.<< parameters.sim-device-runtime >>

  install-dependencies:
    parameters:
      directory:
        type: string
        default: .
    steps:
      # Bundler
      - restore_cache:
          keys: 
            - v1-gem-cache-{{ checksum "Gemfile.lock" }}
      - run: 
          name: Bundle install
          working_directory: << parameters.directory >>
          command: |
              bundle config set --local clean 'true'
              bundle config set --local path 'vendor/bundle'
              bundle install
      - save_cache:
          key: v1-gem-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Install swiftlint
          command: brew install swiftlint
      - run:
          name: Install xcbeautify
          command: brew install xcbeautify

  scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - run: 
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - run:
          name: Archive
          working_directory: << parameters.directory >>
          command: |
              bundle exec fastlane archive

  scan-and-archive-all-platforms:
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Replace API key
          command: bundle exec fastlane replace_api_key_integration_tests
      - run:
          name: Run tests
          working_directory: << parameters.directory >>
          command: bundle exec fastlane scan
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
      - run:
          name: Archive all platforms
          working_directory: << parameters.directory >>
          command: |
              bundle exec fastlane archive_all_platforms
  
  install-dependencies-scan-and-archive:
    parameters:
      directory:
        type: string
    steps:
      - install-dependencies:
          directory: << parameters.directory >>
      - scan-and-archive:
          directory: << parameters.directory >>

  trust-github-key:
    steps:
      - run:
          name: Trust GitHub key
          command: |
              for ip in $(dig @8.8.8.8 github.com +short); \
              do ssh-keyscan github.com,$ip; \
              ssh-keyscan $ip; \
              done 2>/dev/null >> ~/.ssh/known_hosts

  update-spm-installation-commit:
    steps:
      - install-dependencies
      - run:
          name: Update git commit in targets that use SPM for dependencies
          command: |
              bundle exec fastlane update_swift_package_commit

  update-carthage-installation-commit:
    steps:
      - install-dependencies
      - run:
          name: Update git commit in Carthage Installation tests
          working_directory: Tests/InstallationTests/CarthageInstallation/
          command: |
              bundle exec fastlane update_carthage_commit

jobs:
  run-test-ios-16:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 30m
          environment:
            SCAN_DEVICE: iPhone 13 (16.0)
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-15:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 30m
          environment:
            SCAN_DEVICE: iPhone 13 (15.4)
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-tvos:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run tests
          command: bundle exec fastlane test_tvos
          no_output_timeout: 30m
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-14:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 30m
          environment:
            SCAN_DEVICE: iPhone 8 (14.5)
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output
  run-test-ios-13:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - install-and-create-sim:
          install-name: iOS 13.7 Simulator
          sim-device-type: iPhone-8
          sim-device-runtime: iOS-13-7
          sim-name: iPhone 8 (13.7)
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 30m
          environment:
            SCAN_DEVICE: iPhone 8 (13.7)
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  run-test-ios-12:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - install-and-create-sim:
          install-name: iOS 12.4 Simulator
          sim-device-type: iPhone-6
          sim-device-runtime: iOS-12-4
          sim-name: iPhone 6 (12.4)
      - run:
          name: Run tests
          command: bundle exec fastlane test_ios
          no_output_timeout: 30m
          environment:
            SCAN_DEVICE: iPhone 6 (12.4)
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output

  build-tv-watch-and-macos:
    <<: *base-job
    steps:
      - checkout
      - run:
          name: Install swiftlint
          command: brew install swiftlint
      - install-dependencies
      - run:
          name: Build tvOS, watchOS and macOS
          command: bundle exec fastlane build_tv_watch_mac
          no_output_timeout: 30m

  backend-integration-tests:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Run backend_integration Tests
          command: bundle exec fastlane backend_integration_tests
          no_output_timeout: 30m
          environment:
            SCAN_DEVICE: iPhone 11 Pro (15.4)
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/xctest
          destination: scan-test-output


  release-checks: 
    <<: *base-job
    steps:
      - checkout
      - trust-github-key
      # Bundler
      - restore_cache:
          keys: 
            - v1-gem-cache-{{ checksum "Gemfile.lock" }}
      - run: bundle install --clean --path vendor/bundle
      - save_cache:
          key: v1-gem-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - update-spm-installation-commit
      - run:
          name: Deployment checks
          command: bundle exec fastlane release_checks
          environment:
            SCAN_SCHEME: All Tests
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output/report.html
          destination: test_report.html
          
  docs-deploy:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Build docs
          command: bundle exec fastlane generate_docs
  
  make-release:
    <<: *base-job
    steps:
      - checkout
      - trust-github-key
      - update-spm-installation-commit
      - run:
          name: Deploy new version
          command: bundle exec fastlane release
          no_output_timeout: 30m

  prepare-next-version:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - trust-github-key
      - run:
          name: Prepare next version
          command: bundle exec fastlane prepare_next_version

  installation-tests-cocoapods:
    <<: *base-job
    steps:
      - checkout
      - install-dependencies
      - install-dependencies:
          directory: Tests/InstallationTests/CocoapodsInstallation
      - run:
          name: Install Pods
          working_directory: Tests/InstallationTests/CocoapodsInstallation/
          command: |
              pod install
      - scan-and-archive:
          directory: Tests/InstallationTests/CocoapodsInstallation
      
  installation-tests-swift-package-manager:
    <<: *base-job
    steps:
      - checkout
      - trust-github-key
      - update-spm-installation-commit
      - install-dependencies:
          directory: Tests/InstallationTests/SPMInstallation/
      - scan-and-archive-all-platforms:
          directory: Tests/InstallationTests/SPMInstallation/

  installation-tests-carthage:
    <<: *base-job
    steps:
      - checkout
      - trust-github-key
      - update-carthage-installation-commit
      # Carthage
      - run:
          name: Carthage Update
          working_directory: Tests/InstallationTests/CarthageInstallation/
          # install without building, then remove the tests and build, so that carthage
          # doesn't try to build the other installation tests
          command: |
              ./carthage.sh update --no-build
              rm -rf Carthage/Checkouts/purchases-root/Tests/InstallationTests/
              ./carthage.sh build --use-xcframeworks
      
      - install-dependencies-scan-and-archive:
          directory: Tests/InstallationTests/CarthageInstallation/

  installation-tests-xcode-direct-integration:
    <<: *base-job
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout

      - install-dependencies-scan-and-archive:
          directory: Tests/InstallationTests/XcodeDirectInstallation/

  lint:
    <<: *base-job
    working_directory: ~/purchases-ios/
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - install-dependencies
      - run:
          command: mkdir -p fastlane/test_output/swiftlint
      - run:
          name: Run fastlane swiftlint lane
          command: |
            fastlane run swiftlint raise_if_swiftlint_error:true strict:true \
            reporter:junit output_file:fastlane/test_output/swiftlint/junit.xml
      - store_test_results:
          path: fastlane/test_output
      - store_artifacts:
          path: fastlane/test_output

workflows:
  version: 2
  build-test:
    jobs:
      - lint:
          xcode_version: '13.3.1'
      - run-test-ios-16:
          xcode_version: '14.0.0'
      - run-test-ios-15:
          xcode_version: '13.3.1'
      - run-test-tvos:
          xcode_version: '13.3.1'
      - run-test-ios-14:
          xcode_version: '13.3.1'
      - run-test-ios-13:
          xcode_version: '13.3.1'
          <<: *release-branches-and-main
      - run-test-ios-12:
          xcode_version: '13.3.1'
          <<: *release-branches-and-main
      - build-tv-watch-and-macos:
          xcode_version: '13.3.1'
      - release-checks:
          xcode_version: '13.3.1'
          <<: *release-branches
      - backend-integration-tests:
          xcode_version: '13.3.1'
          filters:
              branches:
                # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
                ignore: /pull\/[0-9]+/
      - installation-tests-cocoapods:
          xcode_version: '13.3.1'
          <<: *release-tags-and-branches
      - installation-tests-swift-package-manager:
          xcode_version: '13.3.1'
          <<: *release-tags-and-branches
      - installation-tests-carthage:
          xcode_version: '13.3.1'
          <<: *release-tags-and-branches
      - installation-tests-xcode-direct-integration:
          xcode_version: '13.3.1'
          <<: *release-tags-and-branches
  deploy:
    jobs:
      - make-release:
          xcode_version: '13.3.1'
          <<: *release-tags
      - prepare-next-version:
          xcode_version: '13.3.1'
          <<: *release-tags
      - docs-deploy:
          xcode_version: '14.0.0'
          <<: *release-tags
